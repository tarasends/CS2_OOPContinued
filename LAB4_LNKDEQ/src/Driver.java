// TARA MCKASKLEimport java.util.ArrayList;import java.util.Collections;public class Driver {	static ArrayList <Integer> deck = new ArrayList<>();	// two decks of cards must be stored in an arrayLIST of deques...	static ArrayList<LinkedDeque<Integer>> playerOne = new ArrayList<>();	static ArrayList<LinkedDeque<Integer>> playerTwo = new ArrayList<>();	static int totalP1;	static int totalP2;	static int P1count = 0;	static int P2count = 0;	public static void main(String[] args) {		for (int i = 0; i < 52; i++) {			deck.add(i);			Collections.shuffle(deck);		}		playerOne.add(new LinkedDeque<>());		playerOne.add(new LinkedDeque<>());		playerTwo.add(new LinkedDeque<>());		playerTwo.add(new LinkedDeque<>());		addCardsToDeck();		playTopCard();	}	public static void addCardsToDeck() {		// each player has two stacks of 13 cards		System.out.print("\nPlayer ONE 1st Deck:\n");		for (int i = 0; i < 13; i++) {			playerOne.get(0).addToFront(deck.get(i));			System.out.print(playerOne.get(0).getFront() + " ");		}		System.out.print("\n \nPlayer ONE 2nd Deck:\n");		for (int i = 13; i < 26; i++) {			playerOne.get(1).addToFront(deck.get(i));			System.out.print(playerOne.get(1).getFront() + " ");		}		System.out.print("\n \nPlayer TWO 1st Deck:\n");		for (int i = 26; i < 39; i++) {			playerTwo.get(0).addToFront(deck.get(i));			System.out.print(playerTwo.get(0).getFront() + " ");		}		System.out.print("\n \nPlayer TWO 2nd Deck:\n");		for (int i = 39; i < 52; i++) {			playerTwo.get(1).addToFront(deck.get(i));			System.out.print(playerTwo.get(1).getFront() + " ");		} System.out.println("\n");				//		static LinkedDeque <Integer> shuffledDeque = new LinkedDeque<>();		//		for (Integer eachcard : deck) {		//		shuffledDeque.addToFront(deck.get(eachcard));}		//		while (!shuffledDeque.isEmpty()) {		//					//			playerOne.get(0).addToFront(shuffledDeque.removeFront());		//			playerOne.get(1).addToFront(shuffledDeque.removeFront());		//			playerTwo.get(0).addToFront(shuffledDeque.removeFront());		//			playerTwo.get(1).addToFront(shuffledDeque.removeFront());		//		} 	} 	public static void playTopCard() {		// the number of rounds has to have some predetermined rounds otherwise		// causes an infinite loop/number games that'll keep going since the "won"		// cards are now placed at the bottom of the players’ deck		// each round, each player will play the card at the top of each stack.		// winner of each round - greater number when both values are added together.		// wins this round, puts “won” cards at the bottom (2 cards on each stack)		// in case of a tie, whoever has the single highest value card wins the round.				for (int i = 0 ; i < 100; i++) {			totalP1 = (playerOne.get(0).getFront() + playerOne.get(1).getFront());			totalP2 = (playerTwo.get(0).getFront() + playerTwo.get(1).getFront());			System.out.println();			System.out.println("Player 1's cards: " + playerOne.get(0).getFront() 					+ " and " + playerOne.get(1).getFront() + "\tTotal - " + totalP1);			System.out.println("Player 2's cards: " + playerTwo.get(0).getFront() 					+ " and " + playerTwo.get(1).getFront() + "\tTotal - " + totalP2);			if ( totalP1 > totalP2) {				playerOne.get(0).addToBack(playerOne.get(0).removeFront());				playerOne.get(0).addToBack(playerOne.get(1).removeFront());				playerOne.get(1).addToBack(playerTwo.get(0).removeFront());				playerOne.get(1).addToBack(playerTwo.get(1).removeFront());				System.out.println("Player ONE wins this round. ");			}			else if ( totalP1 < totalP2) { 				playerTwo.get(0).addToBack(playerOne.get(0).removeFront());				playerTwo.get(0).addToBack(playerOne.get(1).removeFront());				playerTwo.get(1).addToBack(playerTwo.get(0).removeFront());				playerTwo.get(1).addToBack(playerTwo.get(1).removeFront());				System.out.println("Player TWO wins this round. ");			}			else if (totalP1 == totalP2) {				System.out.println("*************\t It's a tie. \t**************");				if (playerOne.get(0).getFront() > playerTwo.get(0).getFront()						&& playerOne.get(0).getFront() > playerTwo.get(1).getFront()						|| playerOne.get(1).getFront() > playerTwo.get(0).getFront()						&& playerOne.get(1).getFront() > playerTwo.get(1).getFront()) {					playerOne.get(0).addToBack(playerOne.get(0).removeFront());					playerOne.get(0).addToBack(playerOne.get(1).removeFront());					playerOne.get(1).addToBack(playerTwo.get(0).removeFront());					playerOne.get(1).addToBack(playerTwo.get(1).removeFront());					System.out.println("Player ONE breaks the tie with the HIGHEST CARD and WINS this round!");				} else {					playerTwo.get(0).addToBack(playerOne.get(0).removeFront());					playerTwo.get(0).addToBack(playerOne.get(1).removeFront());					playerTwo.get(1).addToBack(playerTwo.get(0).removeFront());					playerTwo.get(1).addToBack(playerTwo.get(1).removeFront());					System.out.println("Player TWO breaks the tie with the HIGHEST CARD and WINS this round!");				}			}	// end if else conditions for 3 types of games played		} 		// end for loop - rounds of games played	} 			// end playTopCard} 				// end Class